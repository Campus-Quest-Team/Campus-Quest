#!/bin/bash

# A script to test the /api/login endpoint.
# It saves the JWT token and userId as local shell variables.

# --- Configuration ---
# You might need to change these values.
LOGIN="demo"
PASSWORD="demo"

# The URL where your API is running.
# The default port in server.js is usually 5001, but confirm it.
API_URL="http://localhost:5001/api/login"

echo "Attempting to log in as '$LOGIN'..."
echo "API endpoint: $API_URL"

# --- API Call ---
# Use curl to send a POST request.
# -s : silent mode
# -X POST : specify POST request
# -H "Content-Type: application/json" : set header
# -d '{"key":"value"}' : request body
response=$(curl -s -X POST \
  -H "Content-Type: application/json" \
  -d "{\"login\":\"$LOGIN\", \"password\":\"$PASSWORD\"}" \
  $API_URL)

# --- Response Handling ---
# Check if the response is empty (e.g., server not running)
if [ -z "$response" ]; then
    echo "Error: No response from the server. Is it running?"
    exit 1
fi

# Use jq to parse the JSON response.
# Check for an error message in the response first.
error=$(echo "$response" | jq -r '.error')

if [ "$error" != "null" ] && [ ! -z "$error" ]; then
    echo "Login failed: $error"
    exit 1
fi

# Extract userId and accessToken.
# The -r flag in jq removes the quotes from the string.
USER_ID=$(echo "$response" | jq -r '.userId')
JWT_TOKEN=$(echo "$response" | jq -r '.accessToken')

# --- Verification ---
# Check if we got the values.
if [ -z "$USER_ID" ] || [ "$USER_ID" == "null" ]; then
    echo "Error: Could not retrieve User ID from the response."
    echo "Response: $response"
    exit 1
fi

if [ -z "$JWT_TOKEN" ] || [ "$JWT_TOKEN" == "null" ]; then
    echo "Error: Could not retrieve JWT Token from the response."
    echo "Response: $response"
    exit 1
fi

echo "Login successful!"
echo ""
echo "Saved local variables:"
echo "----------------------"
echo "USER_ID: $USER_ID"
echo "JWT_TOKEN: $JWT_TOKEN"
echo "----------------------"
echo ""
echo "You can now use \$USER_ID and \$JWT_TOKEN in this script." 