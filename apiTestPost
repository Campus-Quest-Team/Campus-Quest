#!/bin/bash

# A script to test the full post submission workflow.
# It logs in, fetches the current quest, and then submits a post for it.

# --- Configuration ---
API_BASE_URL="http://localhost:5001/api"
CURRENT_QUEST_URL="$API_BASE_URL/getCurrentQuest"
SUBMIT_POST_URL="$API_BASE_URL/submitPost"
LIKE_POST_URL="$API_BASE_URL/likePost"
FLAG_POST_URL="$API_BASE_URL/flagPost"
GET_FEED_URL="$API_BASE_URL/getFeed"
DELETE_POST_URL="$API_BASE_URL/deletePost"
EDIT_CAPTION_URL="$API_BASE_URL/editCaption"
HAS_COMPLETED_URL="$API_BASE_URL/hasCompletedCurrentQuest"
LOGIN_SCRIPT="./apiTestLogin.sh"
MEDIA_FILE="frontend/public/image.png"
CAPTION="Wow I'm so quirky UwU"
NEW_CAPTION="This is the new edited caption"

# --- Step 1: Login to get credentials ---
echo "Attempting to log in..."

if [ ! -f "$LOGIN_SCRIPT" ]; then
    echo "Error: Login script not found at '$LOGIN_SCRIPT'"
    exit 1
fi

source "$LOGIN_SCRIPT"

if [ -z "$JWT_TOKEN" ] || [ -z "$USER_ID" ]; then
    echo "Failed to obtain JWT token or User ID from login script."
    exit 1
fi

echo "Login successful. User ID: $USER_ID"
echo "-----------------------------------"
echo ""

# --- Step 2: Get the current quest ---
echo "Fetching the current quest..."
current_quest_response=$(curl -s -X GET $CURRENT_QUEST_URL)

QUEST_ID=$(echo "$current_quest_response" | jq -r '.currentQuest.questId')
QUEST_DESCRIPTION=$(echo "$current_quest_response" | jq -r '.questDescription')

if [ -z "$QUEST_ID" ] || [ "$QUEST_ID" == "null" ]; then
    echo "Error: Could not retrieve questId from /api/currentQuest."
    echo "Response: $current_quest_response"
    exit 1
fi

echo "Current Quest ID: $QUEST_ID"
echo "Current Quest Description: $QUEST_DESCRIPTION"
echo "-----------------------------------"
echo ""


# --- Step 3: Call submitPost endpoint ---
echo "Submitting a post for the current quest..."

submit_post_response=$(curl -s -X POST \
  -F "file=@$MEDIA_FILE" \
  -F "userId=$USER_ID" \
  -F "questId=$QUEST_ID" \
  -F "caption=$CAPTION" \
  -F "questDescription=$QUEST_DESCRIPTION" \
  -F "jwtToken=$JWT_TOKEN" \
  $SUBMIT_POST_URL)


# --- Output ---
echo "submitPost response:"
echo "$submit_post_response" | jq '.'

if [ $? -ne 0 ]; then
    echo "Error: Failed to parse submitPost response with jq."
    echo "Raw response: $submit_post_response"
    exit 1
fi

# --- Step 4: Extract Post ID from submission response ---
POST_ID=$(echo "$submit_post_response" | jq -r '.questPostId')

if [ -z "$POST_ID" ] || [ "$POST_ID" == "null" ]; then
    echo "Error: Failed to extract questPostId from submitPost response."
    exit 1
fi
echo "Post submitted successfully. Post ID is: $POST_ID"
echo "-----------------------------------"
echo ""


# --- Step 5: Check if user has completed the current quest ---
echo "Checking if user has completed the current day's quest..."

has_completed_response=$(curl -s -X POST \
  -H "Content-Type: application/json" \
  -d "{\"userId\":\"$USER_ID\", \"jwtToken\":\"$JWT_TOKEN\"}" \
  $HAS_COMPLETED_URL)

echo "hasCompletedCurrentQuest response:"
echo "$has_completed_response" | jq '.'

if [ $? -ne 0 ]; then
    echo "Error: Failed to parse hasCompletedCurrentQuest response with jq."
    echo "Raw response: $has_completed_response"
    exit 1
fi

echo "-----------------------------------"
echo ""


# --- Step 6: Like the post ---
echo "Liking the post..."
like_response=$(curl -s -X POST \
  -H "Content-Type: application/json" \
  -d "{\"userId\":\"$USER_ID\", \"questPostId\":\"$POST_ID\", \"jwtToken\":\"$JWT_TOKEN\"}" \
  $LIKE_POST_URL)

echo "likePost response:"
echo "$like_response" | jq '.'

if [ $? -ne 0 ]; then
    echo "Error: Failed to parse likePost response with jq."
    echo "Raw response: $like_response"
    exit 1
fi

echo "-----------------------------------"
echo ""


# --- Step 7: Flag the post ---
echo "Flagging the post..."
flag_response=$(curl -s -X POST \
  -H "Content-Type: application/json" \
  -d "{\"userId\":\"$USER_ID\", \"questPostId\":\"$POST_ID\", \"jwtToken\":\"$JWT_TOKEN\"}" \
  $FLAG_POST_URL)

echo "flagPost response:"
echo "$flag_response" | jq '.'

if [ $? -ne 0 ]; then
    echo "Error: Failed to parse flagPost response with jq."
    echo "Raw response: $flag_response"
    exit 1
fi


# --- Step 8: Get the feed ---
echo ""
echo "-----------------------------------"
echo "Fetching the feed..."

get_feed_response=$(curl -s -X POST \
  -H "Content-Type: application/json" \
  -d "{\"userId\":\"$USER_ID\", \"jwtToken\":\"$JWT_TOKEN\"}" \
  $GET_FEED_URL)

echo "getFeed response:"
echo "$get_feed_response" | jq '.'

if [ $? -ne 0 ]; then
    echo "Error: Failed to parse getFeed response with jq."
    echo "Raw response: $get_feed_response"
    exit 1
fi


# --- Step 9: Edit the post caption ---
echo ""
echo "-----------------------------------"
echo "Editing the post caption..."

edit_caption_response=$(curl -s -X POST \
  -H "Content-Type: application/json" \
  -d "{\"userId\":\"$USER_ID\", \"postId\":\"$POST_ID\", \"caption\":\"$NEW_CAPTION\", \"jwtToken\":\"$JWT_TOKEN\"}" \
  $EDIT_CAPTION_URL)

echo "editCaption response:"
echo "$edit_caption_response" | jq '.'

if [ $? -ne 0 ]; then
    echo "Error: Failed to parse editCaption response with jq."
    echo "Raw response: $edit_caption_response"
    exit 1
fi


# --- Step 10: Delete the post ---
echo ""
echo "-----------------------------------"
echo "Deleting the post..."

delete_post_response=$(curl -s -X POST \
  -H "Content-Type: application/json" \
  -d "{\"userId\":\"$USER_ID\", \"postId\":\"$POST_ID\", \"jwtToken\":\"$JWT_TOKEN\"}" \
  $DELETE_POST_URL)

echo "deletePost response:"
echo "$delete_post_response" | jq '.'

if [ $? -ne 0 ]; then
    echo "Error: Failed to parse deletePost response with jq."
    echo "Raw response: $delete_post_response"
    exit 1
fi


echo ""
echo "Script finished." 